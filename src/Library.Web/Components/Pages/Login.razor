@page "/login"
@using Library.Web.Services
@inject WebAuthenticationService WebAuth
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Login - Library Management</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center">
                    <h3><i class="fas fa-book"></i> Library Management</h3>
                    <p class="mb-0">Please sign in to continue</p>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle"></i> @errorMessage
                                <button type="button" class="btn-close" @onclick="ClearError"></button>
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle"></i> @successMessage
                                <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope"></i> Email
                            </label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" 
                                      placeholder="Enter your email" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock"></i> Password
                            </label>
                            <InputText id="password" type="password" class="form-control" 
                                      @bind-Value="loginModel.Password" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <text>Signing in...</text>
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt me-2"></i>
                                    <text>Sign In</text>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <p class="mb-0">
                        Don't have an account? 
                        <a href="/register" class="text-decoration-none">
                            <i class="fas fa-user-plus"></i> Sign up here
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        // Se l'utente è già autenticato, reindirizza alla dashboard
        if (WebAuth.IsAuthenticated())
        {
            Navigation.NavigateTo("/dashboard", forceLoad: true);
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            // LOGIN DIRETTO SEMPLICE - senza complicazioni JavaScript
            var (success, user) = await WebAuth.LoginAsync(loginModel.Email, loginModel.Password);
            
            if (success && user != null)
            {
                successMessage = $"Welcome back, {user.Name}!";
                StateHasChanged();
                
                // Piccolo delay per mostrare il messaggio
                await Task.Delay(500);
                
                // Redirect diretto alla dashboard
                Navigation.NavigateTo("/dashboard", true);
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ClearError()
    {
        errorMessage = "";
    }

    private void ClearSuccess()
    {
        successMessage = "";
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = "";
    }
}
