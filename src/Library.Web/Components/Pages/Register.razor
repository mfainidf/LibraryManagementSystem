@page "/register"
@using Library.Core.Interfaces
@using Library.Web.Services
@inject IAuthenticationService AuthService
@inject WebAuthenticationService WebAuth
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Register - Library Management</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-header bg-success text-white text-center">
                    <h3><i class="fas fa-user-plus"></i> Create Account</h3>
                    <p class="mb-0">Join our library management system</p>
                </div>
                <div class="card-body">
                    <EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle"></i> @errorMessage
                                <button type="button" class="btn-close" @onclick="ClearError"></button>
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle"></i> @successMessage
                                <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="name" class="form-label">
                                <i class="fas fa-user"></i> Full Name
                            </label>
                            <InputText id="name" class="form-control" @bind-Value="registerModel.Name" 
                                      placeholder="Enter your full name" />
                            <ValidationMessage For="@(() => registerModel.Name)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope"></i> Email Address
                            </label>
                            <InputText id="email" class="form-control" @bind-Value="registerModel.Email" 
                                      placeholder="Enter your email address" />
                            <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock"></i> Password
                            </label>
                            <InputText id="password" type="password" class="form-control" 
                                      @bind-Value="registerModel.Password" placeholder="Choose a strong password" />
                            <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                            <div class="form-text">Password must be at least 6 characters long</div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">
                                <i class="fas fa-lock"></i> Confirm Password
                            </label>
                            <InputText id="confirmPassword" type="password" class="form-control" 
                                      @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm your password" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <text>Creating account...</text>
                                }
                                else
                                {
                                    <i class="fas fa-user-plus me-2"></i>
                                    <text>Create Account</text>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <p class="mb-0">
                        Already have an account? 
                        <a href="/login" class="text-decoration-none">
                            <i class="fas fa-sign-in-alt"></i> Sign in here
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";

    protected override void OnInitialized()
    {
        // Se l'utente è già autenticato, reindirizza alla dashboard
        if (WebAuth.IsAuthenticated())
        {
            Navigation.NavigateTo("/dashboard", forceLoad: true);
        }
    }

    private async Task HandleRegister()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            var user = await AuthService.RegisterUserAsync(registerModel.Name, registerModel.Email, registerModel.Password);
            await WebAuth.LoginAsync(registerModel.Email, registerModel.Password);
            
            successMessage = $"Account created successfully! Welcome, {user.Name}!";
            StateHasChanged();
            
            // Piccolo delay per mostrare il messaggio di successo
            await Task.Delay(1500);
            
            // Reindirizza alla dashboard con ForceLoad
            Navigation.NavigateTo("/dashboard", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ClearError()
    {
        errorMessage = "";
    }

    private void ClearSuccess()
    {
        successMessage = "";
    }

    public class RegisterModel : IValidatableObject
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name must be less than 100 characters")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = "";

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Password != ConfirmPassword)
            {
                yield return new ValidationResult("Passwords do not match", new[] { nameof(ConfirmPassword) });
            }
        }
    }
}
